from unittest import TestCase
import pytest
import json
from django.contrib.gis.geos import Point
from django.contrib.gis.geos import GEOSGeometry
from api.models import (
    BusStop, Location, TrainStop, Substation, OverheadLine, Motorway,
    Broadband, Greenbelt, School, MetroTube)


class TestBusStopModel(TestCase):
    @pytest.mark.django_db
    def test_update_location_no_busstop(self):
        busstop = BusStop()
        busstop.name = 'Test BusStop'
        busstop.point = Point(-2.347743000012108, 53.38737090322739)
        busstop.save()

        location = Location()
        location.name = 'Test Location'
        geometry = """
            {"coordinates": [
                [
                    [
                        [-2.373605477415186, 53.40969504659278],
                        [-2.3737618172100063, 53.409339507361864],
                        [-2.3736420825281206, 53.409349059663356],
                        [-2.3736136182503316, 53.40925098435937],
                        [-2.372348437061216, 53.40941673318565],
                        [-2.3723238976272407, 53.409362878222495],
                        [-2.371773640845859, 53.40943257437743],
                        [-2.3718032009919567, 53.40951191448939],
                        [-2.3718245008682466, 53.40956909854221],
                        [-2.3718353336832725, 53.4095981768949],
                        [-2.372388619083221, 53.40952876960275],
                        [-2.372366986029961, 53.40974214341905],
                        [-2.37244330450709, 53.40977355411032],
                        [-2.3724480893933726, 53.40980293194619],
                        [-2.3730546640198655, 53.40984058711081],
                        [-2.3730816588728425, 53.409842195613976],
                        [-2.373519931021509, 53.40988946797718],
                        [-2.3736042816221192, 53.409901787986364],
                        [-2.3736898279409133, 53.40970736641803],
                        [-2.373605477415186, 53.40969504659278]
                    ]
                ]
            ],
            "type": "MultiPolygon"}
        """
        location.geom = GEOSGeometry(geometry, srid=4326)
        location.point = location.geom.centroid
        location.save()

        busstop.update_close_locations(default_range=3000)

        updated_location = Location.objects.first()
        self.assertEqual(
            updated_location.nearest_busstop.name,
            'Test BusStop')
        self.assertIsNotNone(updated_location.nearest_busstop_distance)


class TestLocationModel(TestCase):
    @pytest.mark.django_db
    def test_update_nearest_busstop_on_new_location(self):
        busstop = BusStop()
        busstop.name = 'Test BusStop'
        busstop.point = Point(-2.4153695332751557, 53.585971152959274)
        busstop.save()

        location = Location()
        location.name = 'Test Location'
        geometry = """
            {"coordinates": [
                [
                    [
                        [-2.417243587559938, 53.587307594998805],
                        [-2.4172773190316676, 53.587280070692486],
                        [-2.4173514409852657, 53.58721825948106],
                        [-2.4173514409852657, 53.58721825948106],
                        [-2.417384428573676, 53.58719109717106],
                        [-2.417386408047504, 53.58718974239604],
                        [-2.417388763821763, 53.58718865588064],
                        [-2.417391496782378, 53.58718792747945],
                        [-2.417394356948235, 53.58718746820736],
                        [-2.417397345205334, 53.587187367918965],
                        [-2.417400337006054, 53.587187627048955],
                        [-2.4174030832552806, 53.587188246466916],
                        [-2.4174057076147375, 53.58718913588342],
                        [-2.4174557446310443, 53.587211066209946],
                        [-2.417457873460361, 53.587212226928386],
                        [-2.4174596313048182, 53.587213658515026],
                        [-2.417460892730692, 53.58721527155018],
                        [-2.417461656851856, 53.58721697617914],
                        [-2.417461798234508, 53.58721868298221],
                        [-2.417461442312349, 53.587220481379084],
                        [-2.4174603373317, 53.587222102675575],
                        [-2.4174588578217557, 53.58722363542186],
                        [-2.417425864940114, 53.58725025862445],
                        [-2.417425864940114, 53.58725025862445],
                        [-2.4173494967466667, 53.58731162843292],
                        [-2.4173157608682145, 53.58733870348632],
                        [-2.4173137804994558, 53.58733996840554],
                        [-2.4173114247148657, 53.58734105491944],
                        [-2.4173088162910576, 53.58734178288413],
                        [-2.417305956113853, 53.58734224215419],
                        [-2.4173029678456346, 53.58734234244034],
                        [-2.4173001005826373, 53.58734208287329],
                        [-2.417297355210633, 53.58734155330762],
                        [-2.417294730843975, 53.58734066388879],
                        [-2.417246949791007, 53.58732016334699],
                        [-2.417244820961996, 53.58731900262481],
                        [-2.4172429385723864, 53.58731757146959],
                        [-2.4172416771517287, 53.58731595843215],
                        [-2.417240913037613, 53.587314253801786],
                        [-2.41724077166351, 53.58731254699851],
                        [-2.4172411275957963, 53.587310748602285],
                        [-2.417242107153561, 53.58730903788777],
                        [-2.417243587559938, 53.587307594998805]
                    ]
                ]
            ],
            "type": "MultiPolygon"}
        """

        location.geom = GEOSGeometry(geometry, srid=4326)
        location.point = location.geom.centroid
        location.save()

        saved_location = Location.objects.first()

        self.assertIsNotNone(saved_location.nearest_busstop)
        self.assertTrue(saved_location.nearest_busstop_distance > 0)

    @pytest.mark.django_db
    def test_busstop_pre_delete_signal(self):
        busstop = BusStop()
        busstop.name = 'Test BusStop'
        busstop.point = Point(-2.347743000012108, 53.38737090322739)
        busstop.save()

        location = Location()
        location.name = 'Test Location'
        geometry = """
            {"coordinates": [
                [
                    [
                        [-2.373605477415186, 53.40969504659278],
                        [-2.3737618172100063, 53.409339507361864],
                        [-2.3736420825281206, 53.409349059663356],
                        [-2.3736136182503316, 53.40925098435937],
                        [-2.372348437061216, 53.40941673318565],
                        [-2.3723238976272407, 53.409362878222495],
                        [-2.371773640845859, 53.40943257437743],
                        [-2.3718032009919567, 53.40951191448939],
                        [-2.3718245008682466, 53.40956909854221],
                        [-2.3718353336832725, 53.4095981768949],
                        [-2.372388619083221, 53.40952876960275],
                        [-2.372366986029961, 53.40974214341905],
                        [-2.37244330450709, 53.40977355411032],
                        [-2.3724480893933726, 53.40980293194619],
                        [-2.3730546640198655, 53.40984058711081],
                        [-2.3730816588728425, 53.409842195613976],
                        [-2.373519931021509, 53.40988946797718],
                        [-2.3736042816221192, 53.409901787986364],
                        [-2.3736898279409133, 53.40970736641803],
                        [-2.373605477415186, 53.40969504659278]
                    ]
                ]
            ],
            "type": "MultiPolygon"}
        """
        location.geom = GEOSGeometry(geometry, srid=4326)
        location.point = location.geom.centroid
        location.nearest_busstop = busstop
        location.save()

        self.assertIsNotNone(location.nearest_busstop)

        busstop.delete()

        changed_location = Location.objects.first()
        self.assertIsNone(changed_location.nearest_busstop)
        self.assertEqual(changed_location.nearest_busstop_distance, 0)

    @pytest.mark.django_db
    def test_trainstop_pre_delete_signal(self):
        trainstop = TrainStop()
        trainstop.name = 'Test TrainStop'
        trainstop.point = Point(-2.347743000012108, 53.38737090322739)
        trainstop.save()

        location = Location()
        location.name = 'Test Location'
        geometry = """
            {"coordinates": [
                [
                    [
                        [-2.373605477415186, 53.40969504659278],
                        [-2.3737618172100063, 53.409339507361864],
                        [-2.3736420825281206, 53.409349059663356],
                        [-2.3736136182503316, 53.40925098435937],
                        [-2.372348437061216, 53.40941673318565],
                        [-2.3723238976272407, 53.409362878222495],
                        [-2.371773640845859, 53.40943257437743],
                        [-2.3718032009919567, 53.40951191448939],
                        [-2.3718245008682466, 53.40956909854221],
                        [-2.3718353336832725, 53.4095981768949],
                        [-2.372388619083221, 53.40952876960275],
                        [-2.372366986029961, 53.40974214341905],
                        [-2.37244330450709, 53.40977355411032],
                        [-2.3724480893933726, 53.40980293194619],
                        [-2.3730546640198655, 53.40984058711081],
                        [-2.3730816588728425, 53.409842195613976],
                        [-2.373519931021509, 53.40988946797718],
                        [-2.3736042816221192, 53.409901787986364],
                        [-2.3736898279409133, 53.40970736641803],
                        [-2.373605477415186, 53.40969504659278]
                    ]
                ]
            ],
            "type": "MultiPolygon"}
        """
        location.geom = GEOSGeometry(geometry, srid=4326)
        location.point = location.geom.centroid
        location.nearest_trainstop = trainstop
        location.save()

        self.assertIsNotNone(location.nearest_trainstop)

        trainstop.delete()

        changed_location = Location.objects.first()
        self.assertIsNone(changed_location.nearest_trainstop)
        self.assertEqual(changed_location.nearest_trainstop_distance, 0)

    @pytest.mark.django_db
    def test_update_nearest_trainstop_on_new_location(self):
        trainstop = TrainStop()
        trainstop.name = 'Test TrainStop'
        trainstop.point = Point(-2.4153695332751557, 53.585971152959274)
        trainstop.save()

        location = Location()
        location.name = 'Test Location'
        geometry = """
            {"coordinates": [
                [
                    [
                        [-2.417243587559938, 53.587307594998805],
                        [-2.4172773190316676, 53.587280070692486],
                        [-2.4173514409852657, 53.58721825948106],
                        [-2.4173514409852657, 53.58721825948106],
                        [-2.417384428573676, 53.58719109717106],
                        [-2.417386408047504, 53.58718974239604],
                        [-2.417388763821763, 53.58718865588064],
                        [-2.417391496782378, 53.58718792747945],
                        [-2.417394356948235, 53.58718746820736],
                        [-2.417397345205334, 53.587187367918965],
                        [-2.417400337006054, 53.587187627048955],
                        [-2.4174030832552806, 53.587188246466916],
                        [-2.4174057076147375, 53.58718913588342],
                        [-2.4174557446310443, 53.587211066209946],
                        [-2.417457873460361, 53.587212226928386],
                        [-2.4174596313048182, 53.587213658515026],
                        [-2.417460892730692, 53.58721527155018],
                        [-2.417461656851856, 53.58721697617914],
                        [-2.417461798234508, 53.58721868298221],
                        [-2.417461442312349, 53.587220481379084],
                        [-2.4174603373317, 53.587222102675575],
                        [-2.4174588578217557, 53.58722363542186],
                        [-2.417425864940114, 53.58725025862445],
                        [-2.417425864940114, 53.58725025862445],
                        [-2.4173494967466667, 53.58731162843292],
                        [-2.4173157608682145, 53.58733870348632],
                        [-2.4173137804994558, 53.58733996840554],
                        [-2.4173114247148657, 53.58734105491944],
                        [-2.4173088162910576, 53.58734178288413],
                        [-2.417305956113853, 53.58734224215419],
                        [-2.4173029678456346, 53.58734234244034],
                        [-2.4173001005826373, 53.58734208287329],
                        [-2.417297355210633, 53.58734155330762],
                        [-2.417294730843975, 53.58734066388879],
                        [-2.417246949791007, 53.58732016334699],
                        [-2.417244820961996, 53.58731900262481],
                        [-2.4172429385723864, 53.58731757146959],
                        [-2.4172416771517287, 53.58731595843215],
                        [-2.417240913037613, 53.587314253801786],
                        [-2.41724077166351, 53.58731254699851],
                        [-2.4172411275957963, 53.587310748602285],
                        [-2.417242107153561, 53.58730903788777],
                        [-2.417243587559938, 53.587307594998805]
                    ]
                ]
            ],
            "type": "MultiPolygon"}
        """

        location.geom = GEOSGeometry(geometry, srid=4326)
        location.point = location.geom.centroid
        location.save()

        saved_location = Location.objects.first()

        self.assertIsNotNone(saved_location.nearest_trainstop)
        self.assertTrue(saved_location.nearest_trainstop_distance > 0)

    @pytest.mark.django_db
    def test_substation_pre_delete_signal(self):
        substation = Substation()
        substation.name = 'Test Substation'
        substation_geometry = """
            {
                "type": "Polygon",
                "coordinates": [
                    [
                        [-2.169156312672857, 53.52891295465354],
                        [-2.1687144237941136, 53.52894144385621],
                        [-2.168797075718808, 53.529429845087705],
                        [-2.1686500332151675, 53.52944038951054],
                        [-2.1684401411007515, 53.52938945208653],
                        [-2.168404664180413, 53.5291931061935],
                        [-2.166117490672716, 53.52933158537432],
                        [-2.1657496762207225, 53.52920850645722],
                        [-2.1653364214890005, 53.529231100974236],
                        [-2.165305463631339, 53.529029354883946],
                        [-2.1653879841876353, 53.52891418943044],
                        [-2.1652921698108583, 53.52832828019789],
                        [-2.1690248562994463, 53.52810283893536],
                        [-2.169156312672857, 53.52891295465354]
                    ]
                ]
            }
        """
        substation.geom = GEOSGeometry(substation_geometry, srid=4326)
        substation.save()

        location = Location()
        location.name = 'Test Location'
        location_geometry = """
            {
                "type": "MultiPolygon",
                "coordinates": [
                    [
                        [
                            [-2.157510776982608, 53.53674337389424],
                            [-2.1576731902784423, 53.53659844690615],
                            [-2.1577100338295208, 53.53656559076049],
                            [-2.1578566632695027, 53.536436863459144],
                            [-2.1577244610203583, 53.53638805160591],
                            [-2.1576149192450824, 53.536346849754615],
                            [-2.157513689675809, 53.53630923221811],
                            [-2.1574079353831115, 53.53627207010766],
                            [-2.157305202133001, 53.536235802644896],
                            [-2.157215308950556, 53.5362035628668],
                            [-2.1568762394878354, 53.53651815210801],
                            [-2.1569865252411087, 53.5365566571204],
                            [-2.1570915272990887, 53.53659427013797],
                            [-2.1571935067042554, 53.53663053877505],
                            [-2.1572969967274553, 53.536667254633834],
                            [-2.1574042623558207, 53.536704864394146],
                            [-2.157510776982608, 53.53674337389424]
                        ]
                    ]
                ]
            }
        """
        location.geom = GEOSGeometry(location_geometry, srid=4326)
        location.point = location.geom.centroid
        location.save()

        substation.update_close_locations(default_range=3000)
        changed_location = Location.objects.first()
        self.assertIsNotNone(changed_location.nearest_substation)

        substation.delete()

        changed_location = Location.objects.first()
        self.assertIsNone(changed_location.nearest_substation)
        self.assertEqual(changed_location.nearest_substation_distance, 0)

    @pytest.mark.django_db
    def test_update_nearest_substation_on_new_location(self):
        substation = Substation()
        substation.name = 'Test Substation'
        substation_geometry = """
            {
                "type": "Polygon",
                "coordinates": [
                    [
                        [-2.169156312672857, 53.52891295465354],
                        [-2.1687144237941136, 53.52894144385621],
                        [-2.168797075718808, 53.529429845087705],
                        [-2.1686500332151675, 53.52944038951054],
                        [-2.1684401411007515, 53.52938945208653],
                        [-2.168404664180413, 53.5291931061935],
                        [-2.166117490672716, 53.52933158537432],
                        [-2.1657496762207225, 53.52920850645722],
                        [-2.1653364214890005, 53.529231100974236],
                        [-2.165305463631339, 53.529029354883946],
                        [-2.1653879841876353, 53.52891418943044],
                        [-2.1652921698108583, 53.52832828019789],
                        [-2.1690248562994463, 53.52810283893536],
                        [-2.169156312672857, 53.52891295465354]
                    ]
                ]
            }
        """
        substation.geom = GEOSGeometry(substation_geometry, srid=4326)
        substation.save()

        location = Location()
        location.name = 'Test Location'
        location_geometry = """
            {
                "type": "MultiPolygon",
                "coordinates": [
                    [
                        [
                            [-2.157510776982608, 53.53674337389424],
                            [-2.1576731902784423, 53.53659844690615],
                            [-2.1577100338295208, 53.53656559076049],
                            [-2.1578566632695027, 53.536436863459144],
                            [-2.1577244610203583, 53.53638805160591],
                            [-2.1576149192450824, 53.536346849754615],
                            [-2.157513689675809, 53.53630923221811],
                            [-2.1574079353831115, 53.53627207010766],
                            [-2.157305202133001, 53.536235802644896],
                            [-2.157215308950556, 53.5362035628668],
                            [-2.1568762394878354, 53.53651815210801],
                            [-2.1569865252411087, 53.5365566571204],
                            [-2.1570915272990887, 53.53659427013797],
                            [-2.1571935067042554, 53.53663053877505],
                            [-2.1572969967274553, 53.536667254633834],
                            [-2.1574042623558207, 53.536704864394146],
                            [-2.157510776982608, 53.53674337389424]
                        ]
                    ]
                ]
            }
        """
        location.geom = GEOSGeometry(location_geometry, srid=4326)
        location.point = location.geom.centroid
        location.save()

        saved_location = Location.objects.first()

        self.assertIsNotNone(saved_location.nearest_substation)
        self.assertTrue(saved_location.nearest_substation_distance > 0)

    @pytest.mark.django_db
    def test_update_nearest_overheadline_on_new_location(self):
        ohl = OverheadLine()
        ohl.gdo_gid = '12345678'
        ohl_geometry = """
            {
                "type": "LineString",
                "coordinates":
                    [
                        [-2.373197446341212, 53.435409941817795],
                        [-2.3750377532284324, 53.43243794909445],
                        [-2.376610485110038, 53.429871256256185],
                        [-2.378316153812549, 53.42704345147863]
                    ]
            }
        """
        ohl.geom = GEOSGeometry(ohl_geometry, srid=4326)
        ohl.save()

        location = Location()
        location.name = 'Test Location'
        location_geometry = """
            {
                "type": "MultiPolygon",
                "coordinates":
                    [
                        [
                            [
                                [-2.373605477415186, 53.40969504659278],
                                [-2.3737618172100063, 53.409339507361864],
                                [-2.3736420825281206, 53.409349059663356],
                                [-2.3736136182503316, 53.40925098435937],
                                [-2.372348437061216, 53.40941673318565],
                                [-2.3723238976272407, 53.409362878222495],
                                [-2.371773640845859, 53.40943257437743],
                                [-2.3718032009919567, 53.40951191448939],
                                [-2.3718245008682466, 53.40956909854221],
                                [-2.3718353336832725, 53.4095981768949],
                                [-2.372388619083221, 53.40952876960275],
                                [-2.372366986029961, 53.40974214341905],
                                [-2.37244330450709, 53.40977355411032],
                                [-2.3724480893933726, 53.40980293194619],
                                [-2.3730546640198655, 53.40984058711081],
                                [-2.3730816588728425, 53.409842195613976],
                                [-2.373519931021509, 53.40988946797718],
                                [-2.3736042816221192, 53.409901787986364],
                                [-2.3736898279409133, 53.40970736641803],
                                [-2.373605477415186, 53.40969504659278]
                            ]
                        ]
                    ]
            }
        """

        location.geom = GEOSGeometry(location_geometry, srid=4326)
        location.point = location.geom.centroid
        location.save()

        saved_location = Location.objects.first()

        self.assertIsNotNone(saved_location.nearest_ohl)
        self.assertTrue(saved_location.nearest_ohl_distance > 0)

    @pytest.mark.django_db
    def test_overheadline_pre_delete_signal(self):
        ohl = OverheadLine()
        ohl.gdo_gid = '12345678'
        ohl_geometry = """
            {
                "type": "LineString",
                "coordinates":
                    [
                        [-2.373197446341212, 53.435409941817795],
                        [-2.3750377532284324, 53.43243794909445],
                        [-2.376610485110038, 53.429871256256185],
                        [-2.378316153812549, 53.42704345147863]
                    ]
            }
        """
        ohl.geom = GEOSGeometry(ohl_geometry, srid=4326)
        ohl.save()

        location = Location()
        location.name = 'Test Location'
        location_geometry = """
            {
                "type": "MultiPolygon",
                "coordinates":
                    [
                        [
                            [
                                [-2.373605477415186, 53.40969504659278],
                                [-2.3737618172100063, 53.409339507361864],
                                [-2.3736420825281206, 53.409349059663356],
                                [-2.3736136182503316, 53.40925098435937],
                                [-2.372348437061216, 53.40941673318565],
                                [-2.3723238976272407, 53.409362878222495],
                                [-2.371773640845859, 53.40943257437743],
                                [-2.3718032009919567, 53.40951191448939],
                                [-2.3718245008682466, 53.40956909854221],
                                [-2.3718353336832725, 53.4095981768949],
                                [-2.372388619083221, 53.40952876960275],
                                [-2.372366986029961, 53.40974214341905],
                                [-2.37244330450709, 53.40977355411032],
                                [-2.3724480893933726, 53.40980293194619],
                                [-2.3730546640198655, 53.40984058711081],
                                [-2.3730816588728425, 53.409842195613976],
                                [-2.373519931021509, 53.40988946797718],
                                [-2.3736042816221192, 53.409901787986364],
                                [-2.3736898279409133, 53.40970736641803],
                                [-2.373605477415186, 53.40969504659278]
                            ]
                        ]
                    ]
            }
        """
        location.geom = GEOSGeometry(location_geometry, srid=4326)
        location.point = location.geom.centroid
        location.nearest_ohl = ohl
        location.save()

        self.assertIsNotNone(location.nearest_ohl)

        ohl.delete()

        changed_location = Location.objects.first()
        self.assertIsNone(changed_location.nearest_ohl)
        self.assertEqual(changed_location.nearest_ohl_distance, 0)

    @pytest.mark.django_db
    def test_motorway_pre_delete_signal(self):
        mw = Motorway()
        mw.identifier = '481e5ca4-97ce-459d-9838-f9f7ed91cc23'
        mw.number = 'M602 J2'
        mw_geometry = """
            {
                "coordinates": [-2.3375079500053952, 53.48588849626188],
                "type": "Point"
            }
        """
        mw.point = GEOSGeometry(mw_geometry, srid=4326)
        mw.save()

        location = Location()
        location.name = 'Test Location'
        location_geometry = """
            {
                "coordinates":
                    [
                        [
                            [
                                [-2.3369972908395775, 53.48525888376972],
                                [-2.3369940525163266, 53.485268600458234],
                                [-2.336935498349989, 53.485296180508946],
                                [-2.3367903463184074, 53.485368677477894],
                                [-2.336774520316335, 53.485368362567186],
                                [-2.336019711835142, 53.48535538800574],
                                [-2.336016697902087, 53.48535539648553],
                                [-2.3359549016132783, 53.485354222063876],
                                [-2.3359283662457724, 53.485333623218004],
                                [-2.335851848827811, 53.485281255855334],
                                [-2.3358312496805573, 53.48526810072648],
                                [-2.335833954786922, 53.48517182657608],
                                [-2.3358419150472844, 53.48507311075863],
                                [-2.3358491446020144, 53.484958217742054],
                                [-2.33585832753517, 53.48482354458801],
                                [-2.3360229409259032, 53.48473472485203],
                                [-2.336061209496561, 53.48473362844167],
                                [-2.3361374658646623, 53.48473404303164],
                                [-2.3361510283650366, 53.48473400485853],
                                [-2.336232396964968, 53.48473296684289],
                                [-2.3362443004033504, 53.4847327535605],
                                [-2.3365771587847135, 53.48472858010187],
                                [-2.3367945937329364, 53.48472580988856],
                                [-2.3368375380765944, 53.48472523935196],
                                [-2.3368800877393925, 53.48475091625677],
                                [-2.336964126653662, 53.484801553934766],
                                [-2.3369762392572246, 53.484808710537855],
                                [-2.336985021610245, 53.484813988957036],
                                [-2.336986536399243, 53.48481497341494],
                                [-2.3369877540762216, 53.48481649801961],
                                [-2.336988364696983, 53.48481748502874],
                                [-2.336988528936734, 53.48481919237533],
                                [-2.3369883846580577, 53.484820001745085],
                                [-2.336987790433828, 53.484821082038614],
                                [-2.336987193357997, 53.48482180280125],
                                [-2.3369984958130687, 53.484897813396174],
                                [-2.336997444481465, 53.485202255955684],
                                [-2.3369972908395775, 53.48525888376972]
                            ]
                        ]
                    ],
                "type": "MultiPolygon"
            }
        """
        location.geom = GEOSGeometry(location_geometry, srid=4326)
        location.point = location.geom.centroid
        location.nearest_motorway = mw
        location.save()

        self.assertIsNotNone(location.nearest_motorway)

        mw.delete()

        changed_location = Location.objects.first()
        self.assertIsNone(changed_location.nearest_motorway)
        self.assertEqual(changed_location.nearest_motorway_distance, 0)

    @pytest.mark.django_db
    def test_update_nearest_motorway_on_new_location(self):
        mw = Motorway()
        mw.identifier = '481e5ca4-97ce-459d-9838-f9f7ed91cc23'
        mw.number = 'M602 J2'
        mw_geometry = """
            {
                "coordinates": [-2.3375079500053952, 53.48588849626188],
                "type": "Point"
            }
        """
        mw.point = GEOSGeometry(mw_geometry, srid=4326)
        mw.save()

        location = Location()
        location.name = 'Test Location'
        location_geometry = """
            {
                "coordinates":
                    [
                        [
                            [
                                [-2.3369972908395775, 53.48525888376972],
                                [-2.3369940525163266, 53.485268600458234],
                                [-2.336935498349989, 53.485296180508946],
                                [-2.3367903463184074, 53.485368677477894],
                                [-2.336774520316335, 53.485368362567186],
                                [-2.336019711835142, 53.48535538800574],
                                [-2.336016697902087, 53.48535539648553],
                                [-2.3359549016132783, 53.485354222063876],
                                [-2.3359283662457724, 53.485333623218004],
                                [-2.335851848827811, 53.485281255855334],
                                [-2.3358312496805573, 53.48526810072648],
                                [-2.335833954786922, 53.48517182657608],
                                [-2.3358419150472844, 53.48507311075863],
                                [-2.3358491446020144, 53.484958217742054],
                                [-2.33585832753517, 53.48482354458801],
                                [-2.3360229409259032, 53.48473472485203],
                                [-2.336061209496561, 53.48473362844167],
                                [-2.3361374658646623, 53.48473404303164],
                                [-2.3361510283650366, 53.48473400485853],
                                [-2.336232396964968, 53.48473296684289],
                                [-2.3362443004033504, 53.4847327535605],
                                [-2.3365771587847135, 53.48472858010187],
                                [-2.3367945937329364, 53.48472580988856],
                                [-2.3368375380765944, 53.48472523935196],
                                [-2.3368800877393925, 53.48475091625677],
                                [-2.336964126653662, 53.484801553934766],
                                [-2.3369762392572246, 53.484808710537855],
                                [-2.336985021610245, 53.484813988957036],
                                [-2.336986536399243, 53.48481497341494],
                                [-2.3369877540762216, 53.48481649801961],
                                [-2.336988364696983, 53.48481748502874],
                                [-2.336988528936734, 53.48481919237533],
                                [-2.3369883846580577, 53.484820001745085],
                                [-2.336987790433828, 53.484821082038614],
                                [-2.336987193357997, 53.48482180280125],
                                [-2.3369984958130687, 53.484897813396174],
                                [-2.336997444481465, 53.485202255955684],
                                [-2.3369972908395775, 53.48525888376972]
                            ]
                        ]
                    ],
                "type": "MultiPolygon"
            }
        """
        location.geom = GEOSGeometry(location_geometry, srid=4326)
        location.point = location.geom.centroid
        location.save()

        saved_location = Location.objects.first()

        self.assertIsNotNone(saved_location.nearest_motorway)
        self.assertTrue(saved_location.nearest_motorway_distance > 0)

    @pytest.mark.django_db
    def test_broadband_pre_delete_signal(self):
        broadband = Broadband()
        broadband.postcode = 'M11AD'
        broadband.speed_30_mb_percentage = 100.00
        broadband_geometry = """
            {
                "type": "Point",
                "coordinates": [-2.2452159208688465, 53.483847893747615]}
        """
        broadband.point = GEOSGeometry(broadband_geometry, srid=4326)
        broadband.save()

        location = Location()
        location.name = 'Test Location'
        location_geometry = """
            {
                "type": "MultiPolygon",
                "coordinates":
                    [
                        [
                            [
                                [-2.2448113976839146, 53.479316862617466],
                                [-2.244814306841789, 53.47932489233583],
                                [-2.244738077220046, 53.479421413912576],
                                [-2.2447272470745734, 53.47942727861265],
                                [-2.244711466134476, 53.479423814449135],
                                [-2.244483217813091, 53.47971439361897],
                                [-2.2444712987814928, 53.47972220203262],
                                [-2.24445180047244, 53.4797326146407],
                                [-2.24442791399741, 53.47973720271925],
                                [-2.2443941737781885, 53.479731438281924],
                                [-2.2443625773478315, 53.479718532610015],
                                [-2.2432343440218494, 53.47898353113357],
                                [-2.243233192363991, 53.478971866457755],
                                [-2.2432548493734425, 53.47895690148748],
                                [-2.2434746176478515, 53.4788001801132],
                                [-2.243505027912349, 53.47879557891801],
                                [-2.2447536549959026, 53.478918828143414],
                                [-2.244985343162669, 53.478943637478636],
                                [-2.2450353934064458, 53.478950671601844],
                                [-2.245047409240872, 53.47896231396205],
                                [-2.2450496950241248, 53.47897981879277],
                                [-2.2448036988684428, 53.47930131937876],
                                [-2.2447994694859075, 53.47931259059224],
                                [-2.2448113976839146, 53.479316862617466]
                            ]
                        ]
                    ]
            }
        """
        location.geom = GEOSGeometry(location_geometry, srid=4326)
        location.point = location.geom.centroid
        location.nearest_broadband = broadband
        location.save()

        self.assertIsNotNone(location.nearest_broadband)

        broadband.delete()

        changed_location = Location.objects.first()
        self.assertIsNone(changed_location.nearest_broadband)
        self.assertEqual(changed_location.nearest_broadband_distance, 0)
        self.assertEqual(changed_location.nearest_broadband_fast, False)

    @pytest.mark.django_db
    def test_update_nearest_broadband_on_new_location(self):
        broadband = Broadband()
        broadband.postcode = 'M11AD'
        broadband.speed_30_mb_percentage = 100.00
        broadband_geometry = """
            {
                "type": "Point",
                "coordinates": [-2.2452159208688465, 53.483847893747615]}
        """
        broadband.point = GEOSGeometry(broadband_geometry, srid=4326)
        broadband.save()

        location = Location()
        location.name = 'Test Location'
        location_geometry = """
            {
                "type": "MultiPolygon",
                "coordinates":
                    [
                        [
                            [
                                [-2.2448113976839146, 53.479316862617466],
                                [-2.244814306841789, 53.47932489233583],
                                [-2.244738077220046, 53.479421413912576],
                                [-2.2447272470745734, 53.47942727861265],
                                [-2.244711466134476, 53.479423814449135],
                                [-2.244483217813091, 53.47971439361897],
                                [-2.2444712987814928, 53.47972220203262],
                                [-2.24445180047244, 53.4797326146407],
                                [-2.24442791399741, 53.47973720271925],
                                [-2.2443941737781885, 53.479731438281924],
                                [-2.2443625773478315, 53.479718532610015],
                                [-2.2432343440218494, 53.47898353113357],
                                [-2.243233192363991, 53.478971866457755],
                                [-2.2432548493734425, 53.47895690148748],
                                [-2.2434746176478515, 53.4788001801132],
                                [-2.243505027912349, 53.47879557891801],
                                [-2.2447536549959026, 53.478918828143414],
                                [-2.244985343162669, 53.478943637478636],
                                [-2.2450353934064458, 53.478950671601844],
                                [-2.245047409240872, 53.47896231396205],
                                [-2.2450496950241248, 53.47897981879277],
                                [-2.2448036988684428, 53.47930131937876],
                                [-2.2447994694859075, 53.47931259059224],
                                [-2.2448113976839146, 53.479316862617466]
                            ]
                        ]
                    ]
            }
        """
        location.geom = GEOSGeometry(location_geometry, srid=4326)
        location.point = location.geom.centroid
        location.save()

        saved_location = Location.objects.first()

        self.assertIsNotNone(saved_location.nearest_broadband)
        self.assertTrue(saved_location.nearest_broadband_distance > 0)
        self.assertEqual(saved_location.nearest_broadband_fast, True)

    @pytest.mark.django_db
    def test_greenbelt_pre_delete_signal(self):
        greenbelt = Greenbelt()
        greenbelt.code = 'Local_Authority_green_belt_boundaries_2014-15.25'
        greenbelt_geometry = """
            {
                "type": "MultiPolygon",
                "coordinates": [
                [
                    [
                    [
                        -2.1614837256814963,
                        53.07183331520438,
                        0
                    ],
                    [
                        -2.161440204004493,
                        53.07167876512527,
                        0
                    ],
                    [
                        -2.161426422046515,
                        53.07158231050548,
                        0
                    ],
                    [
                        -2.161412261861244,
                        53.07128283205548,
                        0
                    ],
                    [
                        -2.161373377871479,
                        53.071211109880664,
                        0
                    ],
                    [
                        -2.161369504865456,
                        53.07118401041043,
                        0
                    ],
                    [
                        -2.1617677327485008,
                        53.07111245525075,
                        0
                    ],
                    [
                        -2.1617682739467705,
                        53.071109120469266,
                        0
                    ],
                    [
                        -2.1620568237599738,
                        53.07147709017702,
                        0
                    ],
                    [
                        -2.162246918923053,
                        53.07170561414385,
                        0
                    ],
                    [
                        -2.162193868651531,
                        53.07171503969784,
                        0
                    ],
                    [
                        -2.162142294698858,
                        53.07172373689699,
                        0
                    ],
                    [
                        -2.1621361236605248,
                        53.07171871503741,
                        0
                    ],
                    [
                        -2.1614837256814963,
                        53.07183331520438,
                        0
                    ]
                    ]
                ]
                ]
            }
        """
        greenbelt.geom = GEOSGeometry(greenbelt_geometry, srid=4326)
        greenbelt.save()

        location = Location()
        location.name = 'Test Location'
        location_geometry = """
            {
                "type": "MultiPolygon",
                "coordinates":
                    [
                        [
                            [
                                [-2.2611006839832566, 53.38038878620092],
                                [-2.2610825125994793, 53.38038614557534],
                                [-2.2610863627594426, 53.38037660921687],
                                [-2.2610952486264946, 53.38035474743402],
                                [-2.2611566375286523, 53.380363691529595],
                                [-2.261181463464652, 53.38036723261247],
                                [-2.2612925054090502, 53.3803834385581],
                                [-2.2612817028396486, 53.38041141681172],
                                [-2.261280221050265, 53.380414925617124],
                                [-2.2611690287016595, 53.38039871998939],
                                [-2.2611458243233487, 53.38039534703601],
                                [-2.261144051871036, 53.3803950893482],
                                [-2.2611006839832566, 53.38038878620092]
                            ]
                        ]
                    ]
            }
        """
        location.geom = GEOSGeometry(location_geometry, srid=4326)
        location.point = location.geom.centroid
        location.nearest_greenbelt = greenbelt
        location.save()

        self.assertIsNotNone(location.nearest_greenbelt)

        greenbelt.delete()

        changed_location = Location.objects.first()
        self.assertIsNone(changed_location.nearest_greenbelt)
        self.assertEqual(changed_location.nearest_greenbelt_distance, 0)

    @pytest.mark.django_db
    def test_school_pre_delete_signal(self):
        school = School()
        school.urn = "106451"
        school.school_name = "St John's CofE Primary School"
        school_geometry = """
            {
                "type": "Point",
                "coordinates": [-2.6838539645453285, 53.53776337179745]
            }
        """
        school.point = GEOSGeometry(school_geometry, srid=4326)
        school.save()

        location = Location()
        location.name = 'Test Location'
        location_geometry = """
            {
                "type": "MultiPolygon",
                "coordinates":
                    [
                        [
                            [
                                [-2.684158138678509, 53.53842948176405],
                                [-2.684118888947563, 53.53842835811194],
                                [-2.6841037940126786, 53.53842799507081],
                                [-2.6835457107016185, 53.53841343374206],
                                [-2.683529151865655, 53.53838443923376],
                                [-2.6834208871023963, 53.53834344914247],
                                [-2.6836018736049394, 53.53816230293524],
                                [-2.6837828991058927, 53.53803793091213],
                                [-2.6840808896155326, 53.53823483105565],
                                [-2.684095259361201, 53.53822625129759],
                                [-2.6841214162784985, 53.53821082109647],
                                [-2.6841828545078785, 53.538231143106],
                                [-2.684158138678509, 53.53842948176405]
                            ]
                        ]
                    ]
            }
        """
        location.geom = GEOSGeometry(location_geometry, srid=4326)
        location.point = location.geom.centroid
        location.nearest_school = school
        location.save()

        self.assertIsNotNone(location.nearest_school)

        school.delete()

        changed_location = Location.objects.first()
        self.assertIsNone(changed_location.nearest_school)
        self.assertEqual(changed_location.nearest_school_distance, 0)

    @pytest.mark.django_db
    def test_update_nearest_school_on_new_location(self):
        school = School()
        school.urn = "106451"
        school.school_name = "St John's CofE Primary School"
        school_geometry = """
            {
                "type": "Point",
                "coordinates": [-2.6838539645453285, 53.53776337179745]
            }
        """
        school.point = GEOSGeometry(school_geometry, srid=4326)
        school.save()

        location = Location()
        location.name = 'Test Location'
        location_geometry = """
            {
                "type": "MultiPolygon",
                "coordinates":
                    [
                        [
                            [
                                [-2.684158138678509, 53.53842948176405],
                                [-2.684118888947563, 53.53842835811194],
                                [-2.6841037940126786, 53.53842799507081],
                                [-2.6835457107016185, 53.53841343374206],
                                [-2.683529151865655, 53.53838443923376],
                                [-2.6834208871023963, 53.53834344914247],
                                [-2.6836018736049394, 53.53816230293524],
                                [-2.6837828991058927, 53.53803793091213],
                                [-2.6840808896155326, 53.53823483105565],
                                [-2.684095259361201, 53.53822625129759],
                                [-2.6841214162784985, 53.53821082109647],
                                [-2.6841828545078785, 53.538231143106],
                                [-2.684158138678509, 53.53842948176405]
                            ]
                        ]
                    ]
            }
        """
        location.geom = GEOSGeometry(location_geometry, srid=4326)
        location.point = location.geom.centroid
        location.save()

        saved_location = Location.objects.first()

        self.assertIsNotNone(saved_location.nearest_school)
        self.assertTrue(saved_location.nearest_school_distance > 0)

    @pytest.mark.django_db
    def test_update_geom_area_on_new_location(self):
        location = Location()
        location.name = 'Test Location'
        # city of london, very roughly
        location_geometry = """
            {
                "type": "MultiPolygon",
                "coordinates":
                    [
                        [
                            [
                                [-0.11136531829833984, 51.510708962562205],
                                [-0.1139402389526367, 51.51936190593901],
                                [-0.11316776275634764, 51.52165839880962],
                                [-0.08759021759033203, 51.525503429911595],
                                [-0.08381366729736328, 51.525984035971305],
                                [-0.07411479949951172, 51.52026983556635],
                                [-0.06767749786376953, 51.50883928355577],
                                [-0.07428646087646484, 51.5091598054062],
                                [-0.07497310638427733, 51.50680925947236],
                                [-0.09368419647216795, 51.51017477638982],
                                [-0.11136531829833984, 51.510708962562205]
                            ]
                        ]
                    ]
            }
        """
        location.geom = GEOSGeometry(location_geometry, srid=4326)
        location.point = location.geom.centroid
        location.save()

        saved_location = Location.objects.first()

        # If I'd drawn the polygon correctly, it would be a square mile
        # (= 2589988.11 m^2), so 4500000 is the right order of magnitude
        self.assertEqual(int(saved_location.get_geom_area()), 4532170)

    @pytest.mark.django_db
    def test_metrotube_pre_delete_signal(self):
        metrotube = MetroTube()
        metrotube.atco_code = "1800ZZMAECC4"
        metrotube.naptan_code = "aaabbbcc"
        metrotube_geometry = """
            {
                "type": "Point",
                "coordinates": [-2.3336233711, 53.4832127657]
            }
        """
        metrotube.point = GEOSGeometry(metrotube_geometry, srid=4326)
        metrotube.save()

        location = Location()
        location.name = 'Test Location'
        location_geometry = """
            {
                "type": "MultiPolygon",
                "coordinates":
                    [
                        [
                            [
                                [-2.3328088326396546, 53.48350016949884],
                                [-2.332878030388401, 53.483484696235884],
                                [-2.332945714143332, 53.48346832830624],
                                [-2.332950291189711, 53.4834755063256],
                                [-2.3329769965276745, 53.48351812712473],
                                [-2.3329930197562234, 53.48354369960115],
                                [-2.3330090394818432, 53.48356882266139],
                                [-2.3329932486920613, 53.48357291150509],
                                [-2.3328203102968104, 53.483618785376436],
                                [-2.3328050793169988, 53.48359815433043],
                                [-2.332744901957888, 53.48351472919907],
                                [-2.3328088326396546, 53.48350016949884]
                            ]
                        ]
                    ]
            }
        """
        location.geom = GEOSGeometry(location_geometry, srid=4326)
        location.point = location.geom.centroid
        location.nearest_metrotube = metrotube
        location.save()

        self.assertIsNotNone(location.nearest_metrotube)

        metrotube.delete()

        changed_location = Location.objects.first()
        self.assertIsNone(changed_location.nearest_metrotube)
        self.assertEqual(changed_location.nearest_metrotube_distance, 0)

    @pytest.mark.django_db
    def test_update_nearest_metrotube_on_new_location(self):
        metrotube = MetroTube()
        metrotube.atco_code = "1800ZZMAECC4"
        metrotube.naptan_code = "aaabbbcc"
        metrotube_geometry = """
            {
                "type": "Point",
                "coordinates": [-2.3336233711, 53.4832127657]
            }
        """
        metrotube.point = GEOSGeometry(metrotube_geometry, srid=4326)
        metrotube.save()

        location = Location()
        location.name = 'Test Location'
        location_geometry = """
            {
                "type": "MultiPolygon",
                "coordinates":
                    [
                        [
                            [
                                [-2.3328088326396546, 53.48350016949884],
                                [-2.332878030388401, 53.483484696235884],
                                [-2.332945714143332, 53.48346832830624],
                                [-2.332950291189711, 53.4834755063256],
                                [-2.3329769965276745, 53.48351812712473],
                                [-2.3329930197562234, 53.48354369960115],
                                [-2.3330090394818432, 53.48356882266139],
                                [-2.3329932486920613, 53.48357291150509],
                                [-2.3328203102968104, 53.483618785376436],
                                [-2.3328050793169988, 53.48359815433043],
                                [-2.332744901957888, 53.48351472919907],
                                [-2.3328088326396546, 53.48350016949884]
                            ]
                        ]
                    ]
            }
        """
        location.geom = GEOSGeometry(location_geometry, srid=4326)
        location.point = location.geom.centroid
        location.save()

        saved_location = Location.objects.first()

        self.assertIsNotNone(saved_location.nearest_metrotube)
        self.assertTrue(saved_location.nearest_metrotube_distance > 0)


class TestTrainStopModel(TestCase):
    @pytest.mark.django_db
    def test_update_location_no_trainstop(self):
        trainstop = TrainStop()
        trainstop.name = 'Test TrainStop'
        trainstop.point = Point(-2.347743000012108, 53.38737090322739)
        trainstop.save()

        location = Location()
        location.name = 'Test Location'
        geometry = """
            {"coordinates": [
                [
                    [
                        [-2.373605477415186, 53.40969504659278],
                        [-2.3737618172100063, 53.409339507361864],
                        [-2.3736420825281206, 53.409349059663356],
                        [-2.3736136182503316, 53.40925098435937],
                        [-2.372348437061216, 53.40941673318565],
                        [-2.3723238976272407, 53.409362878222495],
                        [-2.371773640845859, 53.40943257437743],
                        [-2.3718032009919567, 53.40951191448939],
                        [-2.3718245008682466, 53.40956909854221],
                        [-2.3718353336832725, 53.4095981768949],
                        [-2.372388619083221, 53.40952876960275],
                        [-2.372366986029961, 53.40974214341905],
                        [-2.37244330450709, 53.40977355411032],
                        [-2.3724480893933726, 53.40980293194619],
                        [-2.3730546640198655, 53.40984058711081],
                        [-2.3730816588728425, 53.409842195613976],
                        [-2.373519931021509, 53.40988946797718],
                        [-2.3736042816221192, 53.409901787986364],
                        [-2.3736898279409133, 53.40970736641803],
                        [-2.373605477415186, 53.40969504659278]
                    ]
                ]
            ],
            "type": "MultiPolygon"}
        """
        location.geom = GEOSGeometry(geometry, srid=4326)
        location.point = location.geom.centroid
        location.save()

        trainstop.update_close_locations(default_range=3000)

        updated_location = Location.objects.first()
        self.assertEqual(
            updated_location.nearest_trainstop.name,
            'Test TrainStop')
        self.assertIsNotNone(updated_location.nearest_trainstop_distance)


class TestSubstationModel(TestCase):
    @pytest.mark.django_db
    def test_update_location_no_substation(self):
        substation = Substation()
        substation.name = 'Test Substation'
        substation_geometry = """
            {
                "type": "Polygon",
                "coordinates": [
                    [
                        [-2.169156312672857, 53.52891295465354],
                        [-2.1687144237941136, 53.52894144385621],
                        [-2.168797075718808, 53.529429845087705],
                        [-2.1686500332151675, 53.52944038951054],
                        [-2.1684401411007515, 53.52938945208653],
                        [-2.168404664180413, 53.5291931061935],
                        [-2.166117490672716, 53.52933158537432],
                        [-2.1657496762207225, 53.52920850645722],
                        [-2.1653364214890005, 53.529231100974236],
                        [-2.165305463631339, 53.529029354883946],
                        [-2.1653879841876353, 53.52891418943044],
                        [-2.1652921698108583, 53.52832828019789],
                        [-2.1690248562994463, 53.52810283893536],
                        [-2.169156312672857, 53.52891295465354]
                    ]
                ]
            }
        """
        substation.geom = GEOSGeometry(substation_geometry, srid=4326)
        substation.save()

        location = Location()
        location.name = 'Test Location'
        location_geometry = """
            {
                "type": "MultiPolygon",
                "coordinates": [
                    [
                        [
                            [-2.157510776982608, 53.53674337389424],
                            [-2.1576731902784423, 53.53659844690615],
                            [-2.1577100338295208, 53.53656559076049],
                            [-2.1578566632695027, 53.536436863459144],
                            [-2.1577244610203583, 53.53638805160591],
                            [-2.1576149192450824, 53.536346849754615],
                            [-2.157513689675809, 53.53630923221811],
                            [-2.1574079353831115, 53.53627207010766],
                            [-2.157305202133001, 53.536235802644896],
                            [-2.157215308950556, 53.5362035628668],
                            [-2.1568762394878354, 53.53651815210801],
                            [-2.1569865252411087, 53.5365566571204],
                            [-2.1570915272990887, 53.53659427013797],
                            [-2.1571935067042554, 53.53663053877505],
                            [-2.1572969967274553, 53.536667254633834],
                            [-2.1574042623558207, 53.536704864394146],
                            [-2.157510776982608, 53.53674337389424]
                        ]
                    ]
                ]
            }
        """
        location.geom = GEOSGeometry(location_geometry, srid=4326)
        location.point = location.geom.centroid
        location.save()

        substation.update_close_locations(default_range=3000)

        updated_location = Location.objects.first()
        self.assertEqual(
            updated_location.nearest_substation.name,
            'Test Substation')
        self.assertIsNotNone(updated_location.nearest_substation_distance)


class TestOverheadLineModel(TestCase):
    @pytest.mark.django_db
    def test_update_location_no_overheadline(self):
        ohl = OverheadLine()
        ohl.gdo_gid = '12345678'
        ohl_geometry = """
            {
                "type": "LineString",
                "coordinates":
                    [
                        [-2.373197446341212, 53.435409941817795],
                        [-2.3750377532284324, 53.43243794909445],
                        [-2.376610485110038, 53.429871256256185],
                        [-2.378316153812549, 53.42704345147863]
                    ]
            }
        """
        ohl.geom = GEOSGeometry(ohl_geometry, srid=4326)
        ohl.save()

        location = Location()
        location.name = 'Test Location'
        location_geometry = """
            {
                "type": "MultiPolygon",
                "coordinates":
                    [
                        [
                            [
                                [-2.373605477415186, 53.40969504659278],
                                [-2.3737618172100063, 53.409339507361864],
                                [-2.3736420825281206, 53.409349059663356],
                                [-2.3736136182503316, 53.40925098435937],
                                [-2.372348437061216, 53.40941673318565],
                                [-2.3723238976272407, 53.409362878222495],
                                [-2.371773640845859, 53.40943257437743],
                                [-2.3718032009919567, 53.40951191448939],
                                [-2.3718245008682466, 53.40956909854221],
                                [-2.3718353336832725, 53.4095981768949],
                                [-2.372388619083221, 53.40952876960275],
                                [-2.372366986029961, 53.40974214341905],
                                [-2.37244330450709, 53.40977355411032],
                                [-2.3724480893933726, 53.40980293194619],
                                [-2.3730546640198655, 53.40984058711081],
                                [-2.3730816588728425, 53.409842195613976],
                                [-2.373519931021509, 53.40988946797718],
                                [-2.3736042816221192, 53.409901787986364],
                                [-2.3736898279409133, 53.40970736641803],
                                [-2.373605477415186, 53.40969504659278]
                            ]
                        ]
                    ]
            }
        """
        location.geom = GEOSGeometry(location_geometry, srid=4326)
        location.point = location.geom.centroid
        location.save()

        ohl.update_close_locations(default_range=3000)

        updated_location = Location.objects.first()
        self.assertEqual(updated_location.nearest_ohl.gdo_gid, '12345678')
        self.assertIsNotNone(updated_location.nearest_ohl_distance)


class TestMotorwayModel(TestCase):
    @pytest.mark.django_db
    def test_update_location_no_motorway(self):
        mw = Motorway()
        mw.identifier = '481e5ca4-97ce-459d-9838-f9f7ed91cc23'
        mw.number = 'M602 J2'
        mw_geometry = """
            {
                "coordinates": [-2.3375079500053952, 53.48588849626188],
                "type": "Point"
            }
        """
        mw.point = GEOSGeometry(mw_geometry, srid=4326)
        mw.save()

        location = Location()
        location.name = 'Test Location'
        location_geometry = """
            {
                "coordinates":
                    [
                        [
                            [
                                [-2.3369972908395775, 53.48525888376972],
                                [-2.3369940525163266, 53.485268600458234],
                                [-2.336935498349989, 53.485296180508946],
                                [-2.3367903463184074, 53.485368677477894],
                                [-2.336774520316335, 53.485368362567186],
                                [-2.336019711835142, 53.48535538800574],
                                [-2.336016697902087, 53.48535539648553],
                                [-2.3359549016132783, 53.485354222063876],
                                [-2.3359283662457724, 53.485333623218004],
                                [-2.335851848827811, 53.485281255855334],
                                [-2.3358312496805573, 53.48526810072648],
                                [-2.335833954786922, 53.48517182657608],
                                [-2.3358419150472844, 53.48507311075863],
                                [-2.3358491446020144, 53.484958217742054],
                                [-2.33585832753517, 53.48482354458801],
                                [-2.3360229409259032, 53.48473472485203],
                                [-2.336061209496561, 53.48473362844167],
                                [-2.3361374658646623, 53.48473404303164],
                                [-2.3361510283650366, 53.48473400485853],
                                [-2.336232396964968, 53.48473296684289],
                                [-2.3362443004033504, 53.4847327535605],
                                [-2.3365771587847135, 53.48472858010187],
                                [-2.3367945937329364, 53.48472580988856],
                                [-2.3368375380765944, 53.48472523935196],
                                [-2.3368800877393925, 53.48475091625677],
                                [-2.336964126653662, 53.484801553934766],
                                [-2.3369762392572246, 53.484808710537855],
                                [-2.336985021610245, 53.484813988957036],
                                [-2.336986536399243, 53.48481497341494],
                                [-2.3369877540762216, 53.48481649801961],
                                [-2.336988364696983, 53.48481748502874],
                                [-2.336988528936734, 53.48481919237533],
                                [-2.3369883846580577, 53.484820001745085],
                                [-2.336987790433828, 53.484821082038614],
                                [-2.336987193357997, 53.48482180280125],
                                [-2.3369984958130687, 53.484897813396174],
                                [-2.336997444481465, 53.485202255955684],
                                [-2.3369972908395775, 53.48525888376972]
                            ]
                        ]
                    ],
                "type": "MultiPolygon"
            }
        """
        location.geom = GEOSGeometry(location_geometry, srid=4326)
        location.point = location.geom.centroid
        location.save()

        mw.update_close_locations(default_range=3000)

        updated_location = Location.objects.first()
        self.assertEqual(
            updated_location.nearest_motorway.identifier,
            '481e5ca4-97ce-459d-9838-f9f7ed91cc23')
        self.assertIsNotNone(updated_location.nearest_motorway_distance)


class TestBroadbandModel(TestCase):
    @pytest.mark.django_db
    def test_update_location_no_broadband(self):
        broadband = Broadband()
        broadband.postcode = 'M11AD'
        broadband.speed_30_mb_percentage = 100.00
        broadband_geometry = """
            {
                "type": "Point",
                "coordinates": [-2.2452159208688465, 53.483847893747615]}
        """
        broadband.point = GEOSGeometry(broadband_geometry, srid=4326)
        broadband.save()

        location = Location()
        location.name = 'Test Location'
        location_geometry = """
            {
                "type": "MultiPolygon",
                "coordinates":
                    [
                        [
                            [
                                [-2.2448113976839146, 53.479316862617466],
                                [-2.244814306841789, 53.47932489233583],
                                [-2.244738077220046, 53.479421413912576],
                                [-2.2447272470745734, 53.47942727861265],
                                [-2.244711466134476, 53.479423814449135],
                                [-2.244483217813091, 53.47971439361897],
                                [-2.2444712987814928, 53.47972220203262],
                                [-2.24445180047244, 53.4797326146407],
                                [-2.24442791399741, 53.47973720271925],
                                [-2.2443941737781885, 53.479731438281924],
                                [-2.2443625773478315, 53.479718532610015],
                                [-2.2432343440218494, 53.47898353113357],
                                [-2.243233192363991, 53.478971866457755],
                                [-2.2432548493734425, 53.47895690148748],
                                [-2.2434746176478515, 53.4788001801132],
                                [-2.243505027912349, 53.47879557891801],
                                [-2.2447536549959026, 53.478918828143414],
                                [-2.244985343162669, 53.478943637478636],
                                [-2.2450353934064458, 53.478950671601844],
                                [-2.245047409240872, 53.47896231396205],
                                [-2.2450496950241248, 53.47897981879277],
                                [-2.2448036988684428, 53.47930131937876],
                                [-2.2447994694859075, 53.47931259059224],
                                [-2.2448113976839146, 53.479316862617466]
                            ]
                        ]
                    ]
            }
        """
        location.geom = GEOSGeometry(location_geometry, srid=4326)
        location.point = location.geom.centroid
        location.save()

        broadband.update_close_locations()

        updated_location = Location.objects.first()
        self.assertEqual(
            updated_location.nearest_broadband.postcode, 'M11AD')
        self.assertEqual(
            updated_location.nearest_broadband_fast, True)
        self.assertIsNotNone(updated_location.nearest_broadband_distance)


class TestGreenbeltModel(TestCase):
    @pytest.mark.django_db
    def test_update_location_no_greenbelt(self):
        greenbelt = Greenbelt()
        greenbelt.code = 'Local_Authority_green_belt_boundaries_2014-15.25'
        greenbelt_geometry = """
            {
                "type": "MultiPolygon",
                "coordinates": [
                [
                    [
                    [
                        -2.1614837256814963,
                        53.07183331520438,
                        0
                    ],
                    [
                        -2.161440204004493,
                        53.07167876512527,
                        0
                    ],
                    [
                        -2.161426422046515,
                        53.07158231050548,
                        0
                    ],
                    [
                        -2.161412261861244,
                        53.07128283205548,
                        0
                    ],
                    [
                        -2.161373377871479,
                        53.071211109880664,
                        0
                    ],
                    [
                        -2.161369504865456,
                        53.07118401041043,
                        0
                    ],
                    [
                        -2.1617677327485008,
                        53.07111245525075,
                        0
                    ],
                    [
                        -2.1617682739467705,
                        53.071109120469266,
                        0
                    ],
                    [
                        -2.1620568237599738,
                        53.07147709017702,
                        0
                    ],
                    [
                        -2.162246918923053,
                        53.07170561414385,
                        0
                    ],
                    [
                        -2.162193868651531,
                        53.07171503969784,
                        0
                    ],
                    [
                        -2.162142294698858,
                        53.07172373689699,
                        0
                    ],
                    [
                        -2.1621361236605248,
                        53.07171871503741,
                        0
                    ],
                    [
                        -2.1614837256814963,
                        53.07183331520438,
                        0
                    ]
                    ]
                ]
                ]
            }
        """
        greenbelt.geom = GEOSGeometry(greenbelt_geometry, srid=4326)
        greenbelt.save()

        location = Location()
        location.name = 'Test Location'
        location_geometry = """
            {
                "type": "MultiPolygon",
                "coordinates":
                    [
                        [
                            [
                                [-2.2611006839832566, 53.38038878620092],
                                [-2.2610825125994793, 53.38038614557534],
                                [-2.2610863627594426, 53.38037660921687],
                                [-2.2610952486264946, 53.38035474743402],
                                [-2.2611566375286523, 53.380363691529595],
                                [-2.261181463464652, 53.38036723261247],
                                [-2.2612925054090502, 53.3803834385581],
                                [-2.2612817028396486, 53.38041141681172],
                                [-2.261280221050265, 53.380414925617124],
                                [-2.2611690287016595, 53.38039871998939],
                                [-2.2611458243233487, 53.38039534703601],
                                [-2.261144051871036, 53.3803950893482],
                                [-2.2611006839832566, 53.38038878620092]
                            ]
                        ]
                    ]
            }
        """
        location.geom = GEOSGeometry(location_geometry, srid=4326)
        location.point = location.geom.centroid
        location.save()

        greenbelt.update_close_locations(default_range=35000)

        updated_location = Location.objects.first()
        self.assertEqual(
            updated_location.nearest_greenbelt.code,
            'Local_Authority_green_belt_boundaries_2014-15.25')
        self.assertIsNotNone(updated_location.nearest_greenbelt_distance)


class TestSchoolModel(TestCase):
    @pytest.mark.django_db
    def test_update_location_no_school(self):
        school = School()
        school.urn = "106451"
        school.school_name = "St John's CofE Primary School"
        school_geometry = """
            {
                "type": "Point",
                "coordinates": [-2.6838539645453285, 53.53776337179745]
            }
        """
        school.point = GEOSGeometry(school_geometry, srid=4326)
        school.save()

        location = Location()
        location.name = 'Test Location'
        location_geometry = """
            {
                "type": "MultiPolygon",
                "coordinates":
                    [
                        [
                            [
                                [-2.684158138678509, 53.53842948176405],
                                [-2.684118888947563, 53.53842835811194],
                                [-2.6841037940126786, 53.53842799507081],
                                [-2.6835457107016185, 53.53841343374206],
                                [-2.683529151865655, 53.53838443923376],
                                [-2.6834208871023963, 53.53834344914247],
                                [-2.6836018736049394, 53.53816230293524],
                                [-2.6837828991058927, 53.53803793091213],
                                [-2.6840808896155326, 53.53823483105565],
                                [-2.684095259361201, 53.53822625129759],
                                [-2.6841214162784985, 53.53821082109647],
                                [-2.6841828545078785, 53.538231143106],
                                [-2.684158138678509, 53.53842948176405]
                            ]
                        ]
                    ]
            }
        """
        location.geom = GEOSGeometry(location_geometry, srid=4326)
        location.point = location.geom.centroid
        location.save()

        school.update_close_locations()

        updated_location = Location.objects.first()
        self.assertEqual(updated_location.nearest_school.urn, '106451')
        self.assertIsNotNone(updated_location.nearest_school_distance)


class TestMetroTubeModel(TestCase):
    @pytest.mark.django_db
    def test_update_location_no_metrotube(self):
        metrotube = MetroTube()
        metrotube.atco_code = "1800ZZMAECC4"
        metrotube.naptan_code = "aaabbbcc"
        metrotube_geometry = """
            {
                "type": "Point",
                "coordinates": [-2.3336233711, 53.4832127657]
            }
        """
        metrotube.point = GEOSGeometry(metrotube_geometry, srid=4326)
        metrotube.save()

        location = Location()
        location.name = 'Test Location'
        location_geometry = """
            {
                "type": "MultiPolygon",
                "coordinates":
                    [
                        [
                            [
                                [-2.3328088326396546, 53.48350016949884],
                                [-2.332878030388401, 53.483484696235884],
                                [-2.332945714143332, 53.48346832830624],
                                [-2.332950291189711, 53.4834755063256],
                                [-2.3329769965276745, 53.48351812712473],
                                [-2.3329930197562234, 53.48354369960115],
                                [-2.3330090394818432, 53.48356882266139],
                                [-2.3329932486920613, 53.48357291150509],
                                [-2.3328203102968104, 53.483618785376436],
                                [-2.3328050793169988, 53.48359815433043],
                                [-2.332744901957888, 53.48351472919907],
                                [-2.3328088326396546, 53.48350016949884]
                            ]
                        ]
                    ]
            }
        """
        location.geom = GEOSGeometry(location_geometry, srid=4326)
        location.point = location.geom.centroid
        location.save()

        metrotube.update_close_locations()

        updated_location = Location.objects.first()
        self.assertEqual(
            updated_location.nearest_metrotube.atco_code, '1800ZZMAECC4')
        self.assertIsNotNone(updated_location.nearest_metrotube_distance)


class TestLocationSiteRequirements(TestCase):
    def test_calculate_area_requirements_primary(self):
        area_requirements = Location.get_area_requirements(
            pupils=100, school_type='primary', post16=0)
        self.assertEqual(area_requirements['lower_area_req'], 722.0)
        self.assertEqual(area_requirements['upper_area_req'], 1140.0)

    def test_calculate_area_requirements_secondary(self):
        area_requirements = Location.get_area_requirements(
            pupils=100, school_type='secondary', post16=0)
        self.assertEqual(area_requirements['lower_area_req'], 1596.0)
        self.assertEqual(area_requirements['upper_area_req'], 2520.0)

    def test_calculate_area_requirements_secondary_post16(self):
        area_requirements = Location.get_area_requirements(
            pupils=100, school_type='secondary', post16=32)
        self.assertEqual(area_requirements['lower_area_req'], 1949.78)
        self.assertEqual(area_requirements['upper_area_req'], 3078.60)
